on:
  push:
    branches: [ main ]

  # to run manually
  workflow_dispatch:

name: Deploy to Amazon ECS

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: production

    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_DEFAULT_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: devsecops-bootcamp
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Build a docker container and
        # push it to ECR so that it can
        # be deployed to ECS.
        tag=${IMAGE_TAG##refs/tags/}
        echo "Tag is $tag"
        echo "::set-output name=tag::$tag"
        docker build --build-arg AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }} \
          --build-arg AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }} \
          --build-arg AWS_DEFAULT_REGION=${{ secrets.AWS_DEFAULT_REGION }} \
          --build-arg FLASK_SECRET_KEY=${{ secrets.FLASK_SECRET_KEY }} \
          -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

    - name: AWS ECR Scan Docker Image
      id: docker-scan
      uses: alexjurkiewicz/ecr-scan-image@v1.7.0
      with:
        repository: devsecops-bootcamp
        tag: ${{ steps.build-image.outputs.tag }}
        fail_threshold: critical

    # Access scan results in later steps
    - run: echo "${{ steps.docker-scan.outputs.total }} total vulnerabilities."

    - name: Fill in the new image ID in the Amazon ECS task definition
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: ecs-task-definition.json
        container-name: devsecops-bootcamp
        image: ${{ steps.build-image.outputs.image }}

    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: devsecops-bootcamp-service
        cluster: devsecops-bootcamp-cluster
        wait-for-service-stability: true


    - name: Get Geckodriver
      uses: wei/wget@v1.1.1
      with:
        args: -O gecko.tar.gz https://github.com/mozilla/geckodriver/releases/download/v0.30.0/geckodriver-v0.30.0-linux64.tar.gz

    - name: Sanity Check with selenium
      uses: fylein/python-pytest-github-action@v2
      with:
        args: pip3 install -r selenium-requirements.txt && pytest selenium-sanity.py


    - name: OWASP Dependency Check
      uses: dependency-check/Dependency-Check_Action@main
      id: Depcheck
      with:
        project: 'test'
        path: '.'
        format: 'HTML'    
        args: >
          --failOnCVSS 7
          --enableRetired
    - name: Upload Test results
      uses: actions/upload-artifact@master
      with:
        name: Depcheck report
        path: ${{github.workspace}}/reports

    - name: SonarCloud Scan
      uses: sonarsource/sonarcloud-github-action@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

    - name: ZAP Scan
      uses: zaproxy/action-baseline@v0.5.0
      with:
        target: 'http://devsecops.go-hacking.com'


  lint:
    name: ACR & SIS
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Run DevSkim scanner
        uses: microsoft/DevSkim-Action@v1
        with:
          output-filename: devskim-results.sarif

      - name: Upload DevSkim scan results
        uses: actions/upload-artifact@v2
        with:
          name: devskim-results
          path: devskim-results.sarif
        
      - name: Trufflehog scan (SIS)
        uses: edplato/trufflehog-actions-scan@master
